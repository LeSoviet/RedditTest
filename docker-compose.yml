services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: orders_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orders_network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: orders_backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/orders_db?schema=public
      PORT: 3000
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./apps/backend/src:/app/apps/backend/src
      - ./apps/backend/prisma:/app/apps/backend/prisma
      - ./packages/shared-types/src:/app/packages/shared-types/src
    networks:
      - orders_network
    command: >
      sh -c "pnpm --filter backend prisma:migrate deploy &&
             pnpm --filter backend prisma:generate &&
             pnpm --filter backend dev:seed"

  # Frontend SPA
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: orders_frontend
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:3000/api
    ports:
      - "5173:5173"
    volumes:
      - ./apps/frontend/src:/app/apps/frontend/src
      - ./packages/shared-types/src:/app/packages/shared-types/src
    networks:
      - orders_network
    stdin_open: true
    tty: true

volumes:
  postgres_data:
    driver: local

networks:
  orders_network:
    driver: bridge
